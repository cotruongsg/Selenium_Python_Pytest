{"name": "test_check_title[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Tests.test_loginpage.Test_Login object at 0x000001B6CB4DFC10>\n\n    def test_check_title(self):\n        self.loginPage = LoginPage(self.driver)\n        self.loginPage.do_login(TestData.USER_NAME, TestData.PASSWORD)\n        actual_title = self.loginPage.getTitle()\n        print(actual_title)\n        self.Assertion.assertEqual(actual_title,TestData.HOMEPAGE_TITLE,\"The current title is not matching with the expected result is OrangeHRM\")\n        self.homePage = HomePage(self.driver)\n>       self.homePage.do_logout()\n\ntest_loginpage.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\HomePage.py:21: in do_logout\n    self.do_click(self.logout_link)\n..\\Pages\\BasePage.py:17: in do_click\n    WebDriverWait(self.driver,10).until(EC.visibility_of_element_located(by_locator)).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4caccc46191f188fff070be254e79397\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001B6CB4AACA0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "stdout", "source": "9e676219-086e-4bca-bd17-245a193686fd-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1713771744131, "stop": 1713771770502, "uuid": "7a847102-ecde-4456-8ed0-0df915895b5f", "historyId": "ea4420671f4fcccc8f86099bccb547b1", "testCaseId": "fc4bb9da61aab2737e659d5d1575a61a", "fullName": "test_loginpage.Test_Login#test_check_title", "labels": [{"name": "epic", "value": "Login Testing"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "suite", "value": "test_loginpage"}, {"name": "subSuite", "value": "Test_Login"}, {"name": "host", "value": "truong"}, {"name": "thread", "value": "11784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_loginpage"}]}