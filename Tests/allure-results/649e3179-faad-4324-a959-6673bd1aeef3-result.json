{"name": "test_geolocation_allow_permission[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"lat-value\"]\"}\n  (Session info: chrome=101.0.4951.41); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x557e9aaab533 <unknown>\n#1 0x557e9a80a1e8 <unknown>\n#2 0x557e9a8402d7 <unknown>\n#3 0x557e9a8404a1 <unknown>\n#4 0x557e9a873494 <unknown>\n#5 0x557e9a85df6d <unknown>\n#6 0x557e9a871224 <unknown>\n#7 0x557e9a85de33 <unknown>\n#8 0x557e9a83371a <unknown>\n#9 0x557e9a834875 <unknown>\n#10 0x557e9aaefe1d <unknown>\n#11 0x557e9aaf3751 <unknown>\n#12 0x557e9aada07e <unknown>\n#13 0x557e9aaf4388 <unknown>\n#14 0x557e9aacefe0 <unknown>\n#15 0x557e9ab10748 <unknown>\n#16 0x557e9ab108c8 <unknown>\n#17 0x557e9ab2a70d <unknown>\n#18 0x7feb89e56609 <unknown>", "trace": "self = <Tests.test_geolocation.Test_Gelocation object at 0x0000018CC2A88790>\n\n    def test_geolocation_allow_permission(self):\n        driver = self.driver\n        driver.get(\"https://the-internet.herokuapp.com/\")\n        driver.maximize_window()\n        WebDriverWait(driver,10).until(EC.visibility_of_element_located((By.LINK_TEXT,'Geolocation'))).click()\n        WebDriverWait(driver,10).until(EC.visibility_of_element_located((By.TAG_NAME,'h3')))\n        driver.find_element(By.TAG_NAME,'button').click()\n        sleep(5)\n>       latitude = driver.find_element(By.ID, 'lat-value').text\n\ntest_geolocation.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018CC27A88D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x557e9ab108c8 \\\\u003Cunknown>\\\\n#17 0x557e9ab2a70d \\\\u003Cunknown>\\\\n#18 0x7feb89e56609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"lat-value\"]\"}\nE         (Session info: chrome=101.0.4951.41); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x557e9aaab533 <unknown>\nE       #1 0x557e9a80a1e8 <unknown>\nE       #2 0x557e9a8402d7 <unknown>\nE       #3 0x557e9a8404a1 <unknown>\nE       #4 0x557e9a873494 <unknown>\nE       #5 0x557e9a85df6d <unknown>\nE       #6 0x557e9a871224 <unknown>\nE       #7 0x557e9a85de33 <unknown>\nE       #8 0x557e9a83371a <unknown>\nE       #9 0x557e9a834875 <unknown>\nE       #10 0x557e9aaefe1d <unknown>\nE       #11 0x557e9aaf3751 <unknown>\nE       #12 0x557e9aada07e <unknown>\nE       #13 0x557e9aaf4388 <unknown>\nE       #14 0x557e9aacefe0 <unknown>\nE       #15 0x557e9ab10748 <unknown>\nE       #16 0x557e9ab108c8 <unknown>\nE       #17 0x557e9ab2a70d <unknown>\nE       #18 0x7feb89e56609 <unknown>\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1713771743646, "stop": 1713771751000, "uuid": "123b102b-6ed6-4295-803e-38dcf6b07382", "historyId": "595da77e8b5a23e35f7f46cee36f7e2a", "testCaseId": "af3663ca346c5076f44c2722eb687214", "fullName": "test_geolocation.Test_Gelocation#test_geolocation_allow_permission", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "suite", "value": "test_geolocation"}, {"name": "subSuite", "value": "Test_Gelocation"}, {"name": "host", "value": "truong"}, {"name": "thread", "value": "66532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_geolocation"}]}