{"name": "test_broken_image[chrome]", "status": "failed", "statusDetails": {"message": "AssertionError: Broken image found: https://the-internet.herokuapp.com/asdf.jpg, Status code: 404\nBroken image found: https://the-internet.herokuapp.com/hjkl.jpg, Status code: 404", "trace": "self = <Tests.test_broken_image.Test_Image object at 0x000001E0620F6610>\n\n    def test_broken_image(self):\n        driver = self.driver\n        driver.get(\"https://the-internet.herokuapp.com/\")\n        driver.maximize_window()\n        WebDriverWait(driver,10).until(EC.visibility_of_element_located((By.LINK_TEXT,'Broken Images'))).click()\n        WebDriverWait(driver,10).until(EC.visibility_of_element_located((By.TAG_NAME,'img')))\n        images = driver.find_elements(By.TAG_NAME,'img')\n    \n        # Iterate over each image element and check if the image is broken\n        for image in images:\n            # Get the source (URL) of the image\n            image_url = image.get_attribute(\"src\")\n    \n            # Check if the image URL is not empty\n            if image_url:\n                # Send a HEAD request to check the status code of the image URL\n                response = requests.head(image_url)\n    \n                # Check if the status code indicates a broken image\n                if response.status_code != 200:\n                    message = f\"Broken image found: {image_url}, Status code: {response.status_code}\"\n                    self.soft_asserts.assert_false(True, message)  # Always assert False to print the message\n                    allure.attach(self.driver.get_screenshot_as_png(),name=f'{image_url}',attachment_type=AttachmentType.PNG)\n>       self.soft_asserts.assert_all()\n\ntest_broken_image.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <nrt_pytest_soft_asserts.soft_asserts.SoftAsserts object at 0x000001E0620EA390>\n\n    def assert_all(self):\n        \"\"\"\n        Raises AssertionError if any of the asserts failed.\n        :return:\n        \"\"\"\n    \n        self.unset_step()\n    \n        if self.failures:\n            failures = self.failures.copy()\n            self.__failures = []\n    \n            self.failure_steps = (\n                list(dict.fromkeys(\n                        [failure.step for failure in failures\n                         if failure.step is not None])))\n    \n>           raise AssertionError('\\n'.join([failure.error for failure in failures]))\nE           AssertionError: Broken image found: https://the-internet.herokuapp.com/asdf.jpg, Status code: 404\nE           Broken image found: https://the-internet.herokuapp.com/hjkl.jpg, Status code: 404\n\n..\\venv\\Lib\\site-packages\\nrt_pytest_soft_asserts\\soft_asserts.py:201: AssertionError"}, "description": "This test checks broken image.", "attachments": [{"name": "https://the-internet.herokuapp.com/asdf.jpg", "source": "51c38960-d254-4c8c-aeb8-4095433aeb99-attachment.png", "type": "image/png"}, {"name": "https://the-internet.herokuapp.com/hjkl.jpg", "source": "4b4971d0-4297-4a6f-822d-5da064fdd00c-attachment.png", "type": "image/png"}], "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1713771744150, "stop": 1713771749075, "uuid": "ecdcaf10-fb75-4dcb-8f4e-f741da40e075", "historyId": "88bfb6b60a409d1bb2aa9ea745ae89f7", "testCaseId": "542578b8eef64c619943b69e966659e8", "fullName": "test_broken_image.Test_Image#test_broken_image", "labels": [{"name": "tag", "value": "Href testing"}, {"name": "severity", "value": "critical"}, {"name": "owner", "value": "Truong Duong"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "suite", "value": "test_broken_image"}, {"name": "subSuite", "value": "Test_Image"}, {"name": "host", "value": "truong"}, {"name": "thread", "value": "55780-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_broken_image"}]}